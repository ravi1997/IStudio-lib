/**
"Description" :{
  "Dated" : "March 29,2020" ,
  "Version" : "1.0.0.1" ,
  "Author" : " Ravinder Singh"
}
*/
import IStudioLibrary;


export namespace IStudioLibrary::FileHandling{

  export class File{
    public:
      Enumeration FileMode{
        READONLY,
        WRITEONLY,
        APPEND,
        READWRITE,
        READAPPEND
      };

    private:
      string name;
      FileMode fileMode;
      bool open=false;
    public:
      File(readonly String fileName,readonly FileMode f):name{fileName},fileMode{f}{}
      ~File(){
        if(open)
          close();
      }

      method open()throws fileException,UnknownException{
        int x=File::SystemCall::open(name,toString(fileMode));
        if(x==0)
          open=true;
        else if(x==1)
          throw FileAlreadyOpened{};
        else if(x==2)
          throw FileNotFound{};
        else
          throw UnknownException{};
      }

      method close(){
          if(open)
            File::SystemCall::close(name);
      }


      method [$Class x] read() [[require: $x.isWritable()]] throws fileException{
        if(open){
            int error;
            [x,error]=File::SystemCall::read(name);
            if(error==0)
              return x;
            else if(error==1)
              throw FileModeNotRead{};
            else if(error==2)
              throw FileNotFound{};
        }
        else
          throw FileNotOpened{};
      }

      method write(readonly $Class x){
        if(open){
          int error;
          error=File::SystemCall::write(name,x);
          if(error==0)
            return x;
          else if(error==1)
            throw FileModeNotWrite{};
          else if(error==2)
            throw FileNotFound{};
        }
        else
          throw FileNotOpened{};
      }

  };

}
